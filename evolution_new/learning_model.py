from abc import ABCMeta, abstractmethod


class LearningModel:
    __metaclass__ = ABCMeta

    @abstractmethod
    def get_approximation(self, qubo_list):
        """Input a list of qubo-matrices to apply the approximation generated by the model.
        """
        raise NotImplementedError

    @abstractmethod
    def set_model_weights_from_pygad(self, pygad_chromosome):
        """Input the chromosome from the pygad pipeline and load it into the model.
        """
        raise NotImplementedError

    @abstractmethod
    def set_model_weights(self, weight_dict):
        """Load the weight dict into the model"""
        raise NotImplementedError

    @abstractmethod
    def get_initial_population(self):
        """Returns an initial population for training purposes"""
        raise NotImplementedError

    @abstractmethod
    def get_training_dataset(self, config: dict) -> dict:
        raise NotImplementedError
