from abc import ABCMeta, abstractmethod


class LearningModel:
    __metaclass__ = ABCMeta

    @abstractmethod
    def get_training_dataset(self, config: dict) -> dict:
        """Inputs the config of the learning and returns a dict containing, the problems, qubos and
           solutions
        """
        raise NotImplementedError

    @abstractmethod
    def get_approximation(self, problem_dict: dict) -> dict:
        """Input a dict with qubo-matrices to apply the approximation generated by the model.
           Returns a dict containing the qubo-approximations
        """
        raise NotImplementedError

    @abstractmethod
    def set_model_weights_from_pygad(self, pygad_chromosome: list):
        """Input the chromosome from the pygad pipeline and load it into the model.
        """
        raise NotImplementedError

    @abstractmethod
    def get_initial_population(self, population_size: int) -> list:
        """Returns an initial population for training purposes"""
        raise NotImplementedError

    @abstractmethod
    def save_best_model(self, pygad_chromosome: list, model_name: str):
        """Returns an initial population for training purposes"""
        raise NotImplementedError

    @abstractmethod
    def load_best_model(self, model_name: str) -> bool:
        """Returns an initial population for training purposes"""
        raise NotImplementedError
